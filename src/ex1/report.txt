---- INSERT --------------------------------------------------------------------------------------------------

We fixed a bug where the insert-method always added the element when breaking out of the for-loop.
This doesn't respect the uniqueness of elements in the set since an element could be added twice.
We now always check if the set doesn't already contain the element before adding.

TestInsertEmptySet():
    Tests inserting into an empty set to validate that it works correctly.

TestInsertDuplicateElement():
    Tests inserting duplicate elements to verify it does not increase the set’s size or change its contents.
    to ensure the Set implementation respects the principle of uniqueness.

TestInsertElementLessThanAllOtherElements():
    Tests that inserting an element smaller than all existing elements places it at the beginning of the set.
    To ensure that inserting a smaller element keeps the order of elements as a new minimum integer was inserted.

TestInsertElementGreaterThanAllOtherElements():
    Tests that inserting an element larger than all existing elements places it at the end of the set.
    To ensure that inserting a larger element keeps the order of elements as a new maximum integer was inserted.

TestInsertElementInTheMiddle():
    Tests that inserting an element that fits between two other elements gets placed there.
    To ensure that an element that doesn't fit as a minimum or maximum gets placed between.

---- MEMBER --------------------------------------------------------------------------------------------------

TestMemberEmptySet():
    Checks that calling member on an empty set always is false.
    To ensure the function doesn't incorrectly report presence on an empty set.

TestMemberElementNotPresent():
    Checks that calling member on an element that was never inserted returns false.
    Ensures that the function correctly identifies when a specific element from a non-empty set.

TestMemberElementPresent():
    Checks that calling member on an element present in the list return true.
    Ensures that the core functionality works as expected.

---- INTERSECT --------------------------------------------------------------------------------------------------

We found a bug in this code where we increment counter while also removing elements from the list simultaneously
as the function iterates over the size of the list. This causes the method to sometimes skip certain indices
and miss to remove elements which should have been removed.
We fixed the method by checking if each element in the calling set object is contained in the other set.
Only then do we increment the counter otherwise we just remove the element at that index.

intersectTestBothSetsEmpty():
    Checks that intersecting two empty sets returns an empty set.
    Ensures we get an empty set when there's nothing to intersect.

intersectTestOneSetEmpty():
    Checks that intersecting when one set is empty return an empty set
    Ensures that we get an empty set since there's no common element as one set is empty.

intersectTestOneCommonElement():
    Checks that intersecting when there's only one common element return a set with only that element.
    Ensures that the core functionality works as we're only looking for common elements.

intersectTestAllElementsCommon():
    Checks that intersecting when all element are common in both sets return as set containing all those elements.
    Ensures that intersecting two identical sets returns correctly.

intersectTestNoCommonElementsAndAllElementsSmaller():
    Checks that when there are no common elements and all elements of one set are smaller the returned set is empty.
    Ensures that disjoint sets with ordered elements result in an empty set.

intersectTestNoCommonElementsAndAllElementsBigger():
    Checks that when there are no common elements and all elements of one set are bigger the returned set is empty.
    As the previous but with the other order.

intersectTestSomeElementsCommon():
    Ensures that when only some elements are common, only those elements are kept.

---- DISTINCT-CLOSED --------------------------------------------------------------------------------------------------

The distinctClosed method got a bug, as we iterate through the set we sometimes check the same element as the indices
(i == j) are the same, to fix this we let the inner loop instead start at j = i + 1 and remove the now unnecessary check
(vi == vj) in the if-clause. This resolves the issue as we will only check distinct elements, but we noticed another bug,
now if the set would have (size <= 1) this would throw an out-of-bounds exception, so we implemented a check in the
beginning of the method that checks: if(a.size <= 1) return true;

distinctClosedTestEmptySet():

distincClosedOneElement():

distinctClosedAddition():

distinctClosedSubtraction():

distinctClosedMultiplication():
















intersect vi inkrementerar på rad 60 vilket gör att vi hamnar på fel index