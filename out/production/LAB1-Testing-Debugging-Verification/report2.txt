public void setRequiredNumber(int nemployee, int starttime, int endtime) { ... }

requires:
  0 <= nemployee and  0 <= starttime and  0 <= endtime

ensures:
  if starttime > endtime then
    the schedule is unchanged
  otherwise
      for (each Hour between starttime and endtime (inclusive))
          if (the length of workingEmployees is greater than nemployee)
          then
             requiredNumber is set to nemployee and workingEmployees
             keeps a number of employees equal to nemployee, discarding
             the rest
          otherwise
             requiredNumber is set to nemployee and workingEmployees is unchanged
      and the rest of the schedule is unchanged


  Input space:
        nemployee => 0
        starttime => 0
        endtime => 0

  Partition:
        starttime <= endtime
        starttime > endtime
        workingEmployees.lenght() > nemployee
        workingEmployees.lenght() <= nemployee

  Block #1: starttime <= endtime
    setRequiredNumberTest_StartEqualToEnd():
            input: nemployee = 2, starttime = 0, endtime = 0
            expected: hours 0 have requiredNumber == 2.

    setRequiredNumberTest_StartLessOrEqualToEnd():
            input: nemployee = 2, starttime = 0, endtime = 2
            expected: hours 0,1,2 have requiredNumber set to 2
                      hours 3,4,5 have requiredNumber set to 0.(unchanged).

  Block #2: startime > endtime
    setRequiredNumberTest_StartBiggerThanEnd():
            input: nemeployee = 2, starttime = 4, endttime = 1
            expected: requiredNumber == 0, (unchanged since starttime > endtime).

  Block #3: workingEmployees.lenght() > nemployee
        setRequiredNumberTest_NemployeeSmallerThanWorkingEmployees():
                input: 1. (nemeployee = 3, starttime = 0, endtime = 3)
                       2. then add three employees
                       3. (nemployee = 2, starttime = 0, endtime = 3)
                expected: requiredNumber == 2 && workingEmployees.lenght() == 2.

  Block #4: workingEmployees.lenght() <= nemployee
      setRequiredNumberTestNemployeeBiggerThanOrEqualToWorkingEmployees():
              input: 1. (nemeployee = 2, starttime = 0, endtime = 3)
                     2. then add two employees
                     3. (nemployee = 3, starttime = 0, endtime = 3)
              expected: requiredNumber == 3 && workingEmployees.length() == 2. (since we didnt add any workers)

  Border cases:
    setRequiredNumberTest_NemployeeZero():
              input: nememployee = 0, starttime = 0, endtime = 3.
              expected: requiredNumber = 0, workingEmplyees = 0 (trims the list of emplyees as it should)

  Found bugs:
    setRequiredNumberTest_NemployeeBiggerThanWorkingEmployees():
    When setting requiredNumber = 3 then adding 3 employees followed by setting requiredNumber = 2
    doesn't trim the list of workers as it should.

---------------------------------------------------------------------------------------------------------------------

public int nextIncomplete(int currenttime) { ... }

requires:
  currenttime >= 0 and currenttime < size

ensures:
  if there is an hour in the interval currenttime to size - 1 such that
     the length of workingEmployees is less that requiredNumber
  then
    returns the time of the hour closest to currenttime such that
    the length of workingEmployees is less that requiredNumber
  otherwise
    returns -1
  and in either case the schedule is unchanged

Input space:
    0 <= currenttime < size

Partition:
    currenttime = 0
    0 < currenttime < size
    currenttime = size-1
    workingEmployees >= requiredEmployees
    workingEmployees < requiredEmployees

Block #1:
    nextIncompleteTest_CurrentTimeEqualToZero():

Block #2:
    nextIncompleteTest_CurrentTimeWithinValidRange():

Block #3:
    nextIncompleteTest_CurrentTimeEqualToLastHour():

Block #4:
    nextIncompleteTest_AllHoursAreFilled():

Block #5:
    nextIncompleteTest_AllHoursAreNotFilled():

Border cases:

Found bugs:
